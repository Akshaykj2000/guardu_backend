const express=require("express")
const studentModel=require("../models/student")
const multer = require("multer")

const router=express.Router()

const bcrypt=require("bcryptjs")

hashPasswordgenerator=async(pass)=>{
    const salt=await bcrypt.genSalt(10)
    return bcrypt.hash(pass,salt)
}

router.post("/signup",async(req,res)=>{
    let{data}={"data":req.body}
    let password=data.password
    const hashedPassword=await hashPasswordgenerator(password)
    data.password=hashedPassword
    let user=new studentModel(data)
    let result=await user.save()
    res.json(
        {
            status:"success"
        }
    )
})

router.post("/login",async(req,res)=>{
    let input=req.body
    let emailid=req.body.emailid
    let data=await studentModel.findOne({"emailid":emailid})
    
    if (!data) {
        return res.json({
            status:"Invalid user"
        })
    }

    console.log(data)
    let dbpassword=data.password
    let inputpassword=req.body.password
    console.log(dbpassword)
    console.log(inputpassword)
    const match=await bcrypt.compare(inputpassword,dbpassword)
    if (!match) {
        return res.json({
            status:"Incorrect password"
        })
    }
    else {
        res.json({status:"success","userdata":data })
    }
    
})

router.post("/myprofile", async (req, res) => {

  
            let input = req.body
            let studentID = req.body.studentId // Assuming you send the user's object ID as userId in the request body
            
            try {
                // Find the user profile by ID
               let data = await studentModel.findById(studentID)
                
                if (!data) {
                    return res.json({
                        status: "Invalid user"
                    })
                } else {
                    // Prepare response data
                    const responseData = {
                        name: data.name,
                        emailid:data.emailid,
                        admissionno: data.admissionno,
                        dateofbirth: data.dateofbirth,
                        age: data.age,
                        contactno: data.contactno,
                        gender: data.gender,
                        department: data.department,
                        class: data.class,
                    
                    }
        
                    console.log(responseData)
        
                    return res.json(responseData)
                }
            } catch (error) {
                console.error('Error fetching user profile:', error)
                return res.status(500).json({
                    status: "Internal Server Error"
                })
            }
        
   
})


router.get("/allstudents",async(req,res)=>{

    let data = await studentModel.find()
    res.json(data)

})



module.exports=router